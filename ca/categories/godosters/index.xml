<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Godosters on Christian Martínez De La Rosa</title><link>https://christt105.github.io/ca/categories/godosters/</link><description>Recent content in Godosters on Christian Martínez De La Rosa</description><generator>Hugo -- gohugo.io</generator><language>ca</language><lastBuildDate>Mon, 02 Jun 2025 00:00:00 +0200</lastBuildDate><atom:link href="https://christt105.github.io/ca/categories/godosters/index.xml" rel="self" type="application/rss+xml"/><item><title>Godosters</title><link>https://christt105.github.io/ca/projects/godosters/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://christt105.github.io/ca/projects/godosters/</guid><description>&lt;img src="https://christt105.github.io/projects/godosters/cover.png" alt="Featured image of post Godosters" />&lt;p>Godosters és un motor i projecte de joc a l&amp;rsquo;estil Pokémon, actualment desenvolupat en Godot 4. El projecte ha evolucionat a través de diverses iteracions i tecnologies, incloent-hi C++, Unity i Godot 3. El seu objectiu és proporcionar una base flexible per crear jocs de captura de monstres, amb característiques com un sistema de mapes personalitzat, lògica d&amp;rsquo;actors/esdeveniments, shaders i més. Per a una història detallada i devlogs, consulta les entrades de blog relacionades.&lt;/p></description></item><item><title>L'Evolució de Godosters</title><link>https://christt105.github.io/ca/blog/godosters-origin/</link><pubDate>Mon, 02 Jun 2025 00:00:00 +0200</pubDate><guid>https://christt105.github.io/ca/blog/godosters-origin/</guid><description>&lt;img src="https://christt105.github.io/blog/godosters-origin/cover.png" alt="Featured image of post L'Evolució de Godosters" />&lt;p>Hola un altre cop. Aquesta vegada faré un repàs del recorregut que ha tingut Godosters, des del seu origen fins ara.&lt;/p>
&lt;p>Aquest contingut havia d&amp;rsquo;estar en el post anterior, però ja era prou llarg i no tan rellevant com per incloure’l.&lt;/p>
&lt;h2 id="origen">Origen
&lt;/h2>&lt;p>Des que vaig començar a aprendre a programar he tingut la idea de crear un projecte base per fer jocs a l’estil Pokémon. La inspiració ve de Pokémon Essentials, un projecte base fet amb RPG Maker XP, un programari molt antic. M’agradava la idea de fer el mateix però amb una base més moderna.&lt;/p>
&lt;p>És un projecte que vaig pensar fa molt temps, i la idea era fer un motor de jocs Pokémon pel meu treball de final de grau. Però al final vaig decidir reduir la càrrega i centrar-me només en un aspecte del motor. Així va néixer &lt;a class="link" href="https://christt105.itch.io/elit3d" target="_blank" rel="noopener"
>Elit3D&lt;/a>, un editor de mapes per tiles en 3D.&lt;/p>
&lt;p>La idea era anar ampliant el projecte fins a crear tota la base en C++, però des que vaig acabar la universitat he estat treballant a jornada completa i no he pogut dedicar gaire temps als meus projectes personals. He anat treballant de forma intermitent tant en Elit3D com en Godosters i altres projectes.&lt;/p>
&lt;h2 id="evolució">Evolució
&lt;/h2>&lt;p>Godosters no és un projecte que comencés directament amb Godot 4, sinó que ha tingut diversos predecessors.&lt;/p>
&lt;h3 id="kip-engine">Kip Engine
&lt;/h3>&lt;p>Poc després de &amp;ldquo;finalitzar&amp;rdquo; Elit3D, vaig fer un fork privat i hi vaig afegir el mòdul de scripting en Lua del &lt;a class="link" href="https://empty-whisper.github.io/WhispEngine/" target="_blank" rel="noopener"
>meu motor de videojocs&lt;/a>. La idea era reprendre el concepte original d’Elit3D: un motor de jocs de monstres de butxaca en 2.5D, barrejant models 3D amb pixel art.&lt;/p>
&lt;p>Hi vaig treballar uns mesos fins que, per falta de temps, el vaig deixar de banda. No vaig fer gran cosa: moviment bàsic del jugador, un parell d’NPCs i l’inici de la base de dades de tipus de Pokémon.&lt;/p>
&lt;p>&lt;img src="https://christt105.github.io/blog/godosters-origin/KipEngine.png"
width="1920"
height="1040"
srcset="https://christt105.github.io/blog/godosters-origin/KipEngine_hu_8b15941847121c8f.png 480w, https://christt105.github.io/blog/godosters-origin/KipEngine_hu_84ff2ec6e96f809e.png 1024w"
loading="lazy"
alt="Preview de Kip Engine"
class="gallery-image"
data-flex-grow="184"
data-flex-basis="443px"
>&lt;/p>
&lt;h3 id="pokémon-esmeralda-godot-3">Pokémon Esmeralda Godot 3
&lt;/h3>&lt;p>La veritat és que el desenvolupament d’aquest projecte ha estat una muntanya russa. Vaig descartar l’ús de C++ per la seva complexitat i vaig decidir fer una prova amb Godot l’any 2022. Vaig començar amb Godot 3, ja que Godot 4 encara no havia sortit oficialment (si no recordo malament).&lt;/p>
&lt;p>La idea era provar Godot per veure què podia oferir. Vaig passar un mes aprenent i desenvolupant un prototip de Pokémon Esmeralda. Vaig fer coses molt bàsiques: moviment del jugador, alguns NPCs i l’inici del sistema de diàleg. Es pot veure en aquest vídeo:&lt;/p>
&lt;div class="video-wrapper">
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/fHTB6xaTJFY"
allowfullscreen
title="YouTube Video"
>
&lt;/iframe>
&lt;/div>
&lt;h3 id="kip-unity-framework">Kip Unity Framework
&lt;/h3>&lt;p>Uns dies després vaig començar el que vaig anomenar Kip Unity Framework, un projecte de Unity per fer jocs de Pokémon. No recordo gaire bé per què vaig canviar de Godot a Unity, potser el vaig veure massa verd i vaig decidir aprofundir més en Unity i C#, que és el que feia servir diàriament.&lt;/p>
&lt;p>En aquest projecte vaig avançar força. En principi el vaig començar per aprendre a fer shaders en Unity, i vaig anar afegint funcionalitats. Algunes de les coses que vaig fer:&lt;/p>
&lt;ul>
&lt;li>Un shader per renderitzar un fons infinit&lt;/li>
&lt;li>Un sistema de tiles temporals com petjades a la sorra&lt;/li>
&lt;li>Un shader que imita el reflex de l’aigua del Pokémon Esmeralda&lt;/li>
&lt;li>L’inici de la introducció amb totes les animacions i efectes&lt;/li>
&lt;li>Un sistema de scripting per nodes, amb el qual vaig fer la intro del professor Bedoll&lt;/li>
&lt;/ul>
&lt;p>Si t’interessa, vaig penjar vídeos en aquesta llista de reproducció: &lt;a class="link" href="https://youtube.com/playlist?list=PL9EieIseZRQD4dVf_MWqubnc0_0wV6vZj&amp;amp;si=mtHnbZRdVdDaFLJU" target="_blank" rel="noopener"
>Pokémon Emerald Unity per christt105&lt;/a>&lt;/p>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/videoseries?list=PL9EieIseZRQD4dVf_MWqubnc0_0wV6vZj" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
&lt;p>Hi vaig estar treballant de forma intermitent durant aproximadament un any, fins que el setembre del 2023 Unity va anunciar els nous canvis de tarifes. Com que ja havia sortit Godot 4, vaig decidir tornar a provar Godot.&lt;/p>
&lt;h3 id="godosters">Godosters
&lt;/h3>&lt;p>Ara sí, em vaig enamorar de Godot. Vaig crear un nou projecte amb Godot 4 i la idea ha estat replicar el que tenia en Kip Unity Framework mentre explorava el motor.&lt;/p>
&lt;p>Vaig començar implementant el moviment del personatge. Estava (i estic) aprenent, així que hi ha moltes coses que he anat canviant i hauré de tornar a fer en el futur. La idea és fer tota la base en 2D i, gràcies a la flexibilitat de Godot, crear també una versió en 2.5D amb els mapes d’Elit3D (tot i que dubto que hi arribi, però aquesta és la idea).&lt;/p>
&lt;p>Aquest és el primer vídeo que tinc del projecte Godosters:&lt;/p>
&lt;p>&lt;img src="https://christt105.github.io/blog/godosters-origin/godosters-first-gif.gif"
width="1913"
height="1005"
srcset="https://christt105.github.io/blog/godosters-origin/godosters-first-gif_hu_fe3a5f939f4939c9.gif 480w, https://christt105.github.io/blog/godosters-origin/godosters-first-gif_hu_4a9c01c0da3522c6.gif 1024w"
loading="lazy"
alt="Primer gif de Godosters"
class="gallery-image"
data-flex-grow="190"
data-flex-basis="456px"
>&lt;/p>
&lt;hr>
&lt;p>I això és tot per ara. Em venia de gust fer un repàs a la història del projecte, perquè a vegades sembla que no hem avançat gaire… però mirant enrere, hi ha hagut molts intents i molt d’aprenentatge.&lt;/p>
&lt;p>Si tens curiositat per les funcionalitats actuals del projecte, et recomano donar una ullada al &lt;a class="link" href="https://christt105.github.io/blog/ca/p/godosters-devlog-0/" target="_blank" rel="noopener"
>post anterior&lt;/a>, on explico amb més detall l’estat actual de Godosters.&lt;/p>
&lt;p>Ens veiem a la pròxima entrada!&lt;/p></description></item><item><title>Presentant Godosters – Devlog #0</title><link>https://christt105.github.io/ca/blog/godosters-devlog-0/</link><pubDate>Mon, 26 May 2025 00:00:00 +0200</pubDate><guid>https://christt105.github.io/ca/blog/godosters-devlog-0/</guid><description>&lt;img src="https://christt105.github.io/blog/godosters-devlog-0/cover.png" alt="Featured image of post Presentant Godosters – Devlog #0" />&lt;p>Hola! En aquesta entrada vull explicar breument l’estat actual del projecte en què he estat treballant: &lt;strong>Godosters&lt;/strong>.&lt;/p>
&lt;h2 id="descripció">Descripció
&lt;/h2>&lt;p>Godosters és un motor per crear jocs estil Pokémon. És un projecte que vaig començar fa diversos anys i que ha anat canviant de tecnologia fins a quedar-se amb Godot 4. En el futur, escriuré una entrada explicant l’evolució i les decisions que em van portar a triar Godot.&lt;/p>
&lt;p>Ara mateix és un projecte base a Godot amb algunes funcionalitats bàsiques, però l’objectiu és crear totes les eines necessàries perquè l’usuari no necessiti conèixer Godot per crear el seu joc.&lt;/p>
&lt;p>Actualment és privat, però tan bon punt tingui alguna cosa estable, el faré públic. La idea és minimitzar les dependències i escriure-ho tot amb GDScript, o amb GDExtensions si realment és necessari.&lt;/p>
&lt;h2 id="funcionalitats-actuals">Funcionalitats actuals
&lt;/h2>&lt;p>En aquest blog aniré escrivint un diari de desenvolupament on comentaré funcionalitats i canvis al projecte. Fem una ullada a les funcionalitats actuals. Si alguna t’interessa i vols saber com l’he fet, escriu-me als comentaris.&lt;/p>
&lt;p>Una petita demostració en vídeo de l’estat actual del projecte:&lt;/p>
&lt;div class="video-wrapper">
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/3pehEhqk4rA"
allowfullscreen
title="YouTube Video"
>
&lt;/iframe>
&lt;/div>
&lt;h3 id="shader-de-reflex-a-laigua">Shader de reflex a l’aigua
&lt;/h3>&lt;p>Encara recordo la primera vegada que vaig arribar a &lt;code>Ciudad Petália&lt;/code> i vaig veure el meu reflex al llac, al costat d’aquell nen. Era un efecte que pensava que seria fàcil de fer i per això el vaig triar com a primer. Em cridava l’atenció el món dels shaders, i he de dir que la simplicitat de Godot per escriure’ls em va sorprendre molt. És força semblant a GLSL. Vaig fer aquest &lt;a class="link" href="https://godotshaders.com/shader/sprite-water-reflection-pixel-art/" target="_blank" rel="noopener"
>shader d’aigua&lt;/a>, al link teniu tots els detalls. Es pot activar per entitat, canviar-ne el color i ajustar-ne la posició. Per exemple, al vídeo es veu com el reflex del jugador i del Kecleon sota el pont està uns quants tiles més avall i amb un tint fosc.&lt;/p>
&lt;p>&lt;img src="https://christt105.github.io/blog/godosters-devlog-0/water-shader.gif"
width="469"
height="322"
srcset="https://christt105.github.io/blog/godosters-devlog-0/water-shader_hu_625cbd93c75748f5.gif 480w, https://christt105.github.io/blog/godosters-devlog-0/water-shader_hu_5a857f274281ddea.gif 1024w"
loading="lazy"
alt="Shader d’Aigua"
class="gallery-image"
data-flex-grow="145"
data-flex-basis="349px"
>&lt;/p>
&lt;h3 id="shader-de-fons-infinit-unmoving-plaid">Shader de fons infinit (Unmoving Plaid)
&lt;/h3>&lt;p>Seguint amb shaders, en vaig fer un per al &lt;a class="link" href="https://godotshaders.com/shader/infinite-sprite/" target="_blank" rel="noopener"
>fons infinit (o “unmoving plaid”)&lt;/a>. La idea és que cada mapa tingui una mida fixa, cosa que ajuda a calcular límits i connectar àrees. El problema és que, quan arribes a la vora del mapa, es veu el fons si no s’ha omplert tot. Per evitar feina extra, vaig fer un shader que genera una imatge contínua al fons. Cada mapa podrà tenir la seva imatge de fons, i així no caldrà pintar fora dels límits.&lt;/p>
&lt;p>&lt;img src="https://christt105.github.io/blog/godosters-devlog-0/infinite-map.gif"
width="1284"
height="754"
srcset="https://christt105.github.io/blog/godosters-devlog-0/infinite-map_hu_13269702ec6bf0a5.gif 480w, https://christt105.github.io/blog/godosters-devlog-0/infinite-map_hu_afb0e7984e49beeb.gif 1024w"
loading="lazy"
alt="Shader de mapa infinit"
class="gallery-image"
data-flex-grow="170"
data-flex-basis="408px"
>&lt;/p>
&lt;h3 id="sistema-de-mapes">Sistema de mapes
&lt;/h3>&lt;p>Pel sistema de mapes, he optat per fer cada àrea com una escena que hereta d’una plantilla de mapa. Sé que l’herència d’escenes no és la millor opció segons es diu, però ara mateix està així. Cada mapa té alguns atributs — de moment només la mida del mapa en tiles i connexions a altres àrees.&lt;/p>
&lt;p>&lt;img src="https://christt105.github.io/blog/godosters-devlog-0/MapTemplate.png"
width="1917"
height="1034"
srcset="https://christt105.github.io/blog/godosters-devlog-0/MapTemplate_hu_8541cbe954f7074.png 480w, https://christt105.github.io/blog/godosters-devlog-0/MapTemplate_hu_8f10f9085ea545df.png 1024w"
loading="lazy"
alt="Plantilla de Mapa"
class="gallery-image"
data-flex-grow="185"
data-flex-basis="444px"
> &lt;img src="https://christt105.github.io/blog/godosters-devlog-0/Route120Editor.png"
width="1919"
height="1029"
srcset="https://christt105.github.io/blog/godosters-devlog-0/Route120Editor_hu_6ca633814e9f7cc3.png 480w, https://christt105.github.io/blog/godosters-devlog-0/Route120Editor_hu_922ace8f9ae58deb.png 1024w"
loading="lazy"
alt="Ruta 120 a l’Editor"
class="gallery-image"
data-flex-grow="186"
data-flex-basis="447px"
>&lt;/p>
&lt;p>Dins de cada escena de mapa hi ha un node TileMap on es dibuixa tot, tot i que encara no està actualitzat al nou sistema de tilemaps de Godot. He definit alguns valors de Z-index per controlar l’ordre de dibuix. Per exemple, els reflexos tenen un valor de -15.&lt;/p>
&lt;p>També hi ha un conjunt de TileMaps de comportament. Aquests assignen propietats a les caselles pintant amb diferents sprites: es pot bloquejar el moviment totalment o direccionalment, o assignar-hi un ID de tipus de tile, com si és aigua o si deixa petjades, etc. Un cop pintat, cal prémer un botó per aplicar-ho a la capa. Com que pot haver-hi múltiples TileMaps de comportament, es poden activar o desactivar durant el joc. Per exemple, al vídeo es veu un pont a la Ruta 120 que utilitza dos TileMaps de comportament: un bloqueja l’aigua quan ets a sobre del pont, i l’altre s’activa quan estàs a sota. Quan el jugador travessa el pont, es canvia el TileMap actiu. Encara és un sistema molt inicial i amb moltes millores pendents. L’objectiu és que tot això es pugui modificar des d’una eina pròpia, sense preocupar-se del que passa per dins.&lt;/p>
&lt;p>Finalment, hi ha una llista d’Actors o esdeveniments. Aquests són NPCs o objectes físics amb comportaments.&lt;/p>
&lt;h3 id="actors">Actors
&lt;/h3>&lt;p>Un actor és una entitat amb comportament. Se li pot assignar una textura, si té reflex, a quina capa està, si és sòlid, etc.&lt;/p>
&lt;p>Els actors tenen un camp on s’hi pot afegir un script de comportament. Cada objecte de comportament té funcions que es disparen segons com interactuem amb ell: si prems el botó d’acció davant, si hi entres a sobre, o si s’executa en bucle. Es poden afegir accions a una llista i aquestes s’executen en ordre. Hi ha diversos tipus d’accions, i es poden crear d’útils i reutilitzables. Ara mateix, tot es fa des de l’inspector i és molt rudimentari. En el futur m’agradaria fer un llenguatge senzill per definir-ho tot des d’un fitxer. També tinc la idea de fer-ho amb nodes, com vaig fer amb el &lt;a class="link" href="https://youtu.be/_zOz2Mj4AMI?si=Zeix66XkwtTjLc9d" target="_blank" rel="noopener"
>Kip Unity Framework&lt;/a>, que crec que pot anar molt bé per a qui no li agrada programar.&lt;/p>
&lt;p>&lt;img src="https://christt105.github.io/blog/godosters-devlog-0/ActorKecleon.png"
width="495"
height="745"
srcset="https://christt105.github.io/blog/godosters-devlog-0/ActorKecleon_hu_377de4c563565376.png 480w, https://christt105.github.io/blog/godosters-devlog-0/ActorKecleon_hu_d2d0da77dae6f2e6.png 1024w"
loading="lazy"
alt="Actor Kecleon"
class="gallery-image"
data-flex-grow="66"
data-flex-basis="159px"
> &lt;img src="https://christt105.github.io/blog/godosters-devlog-0/ActorRunner.png"
width="507"
height="723"
srcset="https://christt105.github.io/blog/godosters-devlog-0/ActorRunner_hu_9ccd3194a1bdd862.png 480w, https://christt105.github.io/blog/godosters-devlog-0/ActorRunner_hu_71df2d7325c2e2c6.png 1024w"
loading="lazy"
alt="Actor Corredor"
class="gallery-image"
data-flex-grow="70"
data-flex-basis="168px"
>&lt;/p>
&lt;h3 id="sistema-de-combats">Sistema de combats
&lt;/h3>&lt;p>No us enganyaré — el sistema de combats és el que menys ganes tinc de fer. Té tantes variables i és tan complex que requereix molt de temps per fer-lo decent. He fet un sistema molt bàsic que aniré ampliant segons calgui.&lt;/p>
&lt;p>He pensat a utilitzar el motor de combats de Showdown per no haver de programar tota la lògica i garantir que funciona perfectament, però no estic segur que sigui possible. Ho hauré d’investigar.&lt;/p>
&lt;p>&lt;img src="https://christt105.github.io/blog/godosters-devlog-0/BattleSystem.png"
width="1918"
height="1022"
srcset="https://christt105.github.io/blog/godosters-devlog-0/BattleSystem_hu_dd18a46e83d3dc2c.png 480w, https://christt105.github.io/blog/godosters-devlog-0/BattleSystem_hu_a852f7d8f687b03d.png 1024w"
loading="lazy"
alt="Combat"
class="gallery-image"
data-flex-grow="187"
data-flex-basis="450px"
>&lt;/p>
&lt;h3 id="base-de-dades">Base de dades
&lt;/h3>&lt;p>M’agrada molt la gestió de dades, però també ha estat un dels motius pels quals vaig aturar el projecte durant un temps. Al Kip Unity Framework utilitzava ScriptableObjects per a cada Pokémon i per a cada característica de les espècies. Tenir-ho tot separat en assets m’agradava molt. El problema va ser intentar replicar això a Godot amb Resources — no és el mateix. Són una bona eina però no estan pensades per això. El principal problema són les referències circulars. És un &lt;a class="link" href="https://github.com/godotengine/godot-proposals/issues/7363" target="_blank" rel="noopener"
>tema molt parlat a la comunitat&lt;/a> i hi ha moltes opinions. Durant el desenvolupament vaig veure que les futures versions tindrien &lt;code>.uid&lt;/code> per a cada fitxer, i vaig pensar que potser això ho solucionaria. Ho he anat mirant de tant en tant, però encara no sé si continuar amb aquest sistema o canviar de model per a la base de dades.&lt;/p>
&lt;p>&lt;img src="https://christt105.github.io/blog/godosters-devlog-0/MudkipProperties.png"
width="655"
height="942"
srcset="https://christt105.github.io/blog/godosters-devlog-0/MudkipProperties_hu_a06cc148e04f262d.png 480w, https://christt105.github.io/blog/godosters-devlog-0/MudkipProperties_hu_4efbebad52f7ecb3.png 1024w"
loading="lazy"
alt="Propietats Mudkip"
class="gallery-image"
data-flex-grow="69"
data-flex-basis="166px"
> &lt;img src="https://christt105.github.io/blog/godosters-devlog-0/MonsterDatabase.png"
width="342"
height="855"
srcset="https://christt105.github.io/blog/godosters-devlog-0/MonsterDatabase_hu_acbdaaf28a1753b8.png 480w, https://christt105.github.io/blog/godosters-devlog-0/MonsterDatabase_hu_e8d9c19753dd9965.png 1024w"
loading="lazy"
alt="Base de Dades"
class="gallery-image"
data-flex-grow="40"
data-flex-basis="96px"
>&lt;/p>
&lt;h2 id="demo">Demo
&lt;/h2>&lt;p>Tot i que està trencat per molts llocs, intentaré treure una versió amb cada devlog per mostrar com avança el projecte. Tingues en compte que és una versió molt inicial, i que moltes funcionalitats no funcionen o només funcionen des de l’editor.&lt;/p>
&lt;div class="card download-card">
&lt;div class="download-card__content">
&lt;div class="download-card__title">
Descarrega
&lt;/div>
&lt;div class="download-card__buttons">
&lt;a href='https://github.com/christt105/blog/releases/download/Godosters_v0.1.0/Godosters_v0.1.0-linux.zip'
class="button download-card__button download-card__button--linux">
&lt;svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="icon icon-tabler icons-tabler-outline icon-tabler-brand-debian">&lt;path stroke="none" d="M0 0h24v24H0z" fill="none"/>&lt;path d="M12 17c-2.397 -.943 -4 -3.153 -4 -5.635c0 -2.19 1.039 -3.14 1.604 -3.595c2.646 -2.133 6.396 -.27 6.396 3.23c0 2.5 -2.905 2.121 -3.5 1.5c-.595 -.621 -1 -1.5 -.5 -2.5" />&lt;path d="M12 12m-9 0a9 9 0 1 0 18 0a9 9 0 1 0 -18 0" />&lt;/svg> Linux
&lt;/a>
&lt;a href='https://github.com/christt105/blog/releases/download/Godosters_v0.1.0/Godosters_v0.1.0-windows.zip'
class="stack-btn stack-btn--secondary download-card__button download-card__button--windows">
&lt;svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="currentColor" class="icon icon-tabler icons-tabler-filled icon-tabler-brand-windows">&lt;path stroke="none" d="M0 0h24v24H0z" fill="none"/>&lt;path d="M21 13v5c0 1.57 -1.248 2.832 -2.715 2.923l-.113 .003l-.042 .018a1 1 0 0 1 -.336 .056l-.118 -.008l-4.676 -.585v-7.407zm-10 0v7.157l-5.3 -.662c-1.514 -.151 -2.7 -1.383 -2.7 -2.895v-3.6zm0 -9.158v7.158h-8v-3.6c0 -1.454 1.096 -2.648 2.505 -2.87zm10 2.058v5.1h-8v-7.409l4.717 -.589c1.759 -.145 3.283 1.189 3.283 2.898" />&lt;/svg> Windows
&lt;/a>
&lt;/div>
&lt;/div>
&lt;div class="download-card__footer">
&lt;span style="opacity: 0.8">Versió:&lt;/span>
&lt;b>Godosters_v0.1.0&lt;/b>
&lt;/div>
&lt;/div>
&lt;h2 id="futur">Futur
&lt;/h2>&lt;p>La veritat és que no sé fins on arribarà aquest projecte. És un projecte personal sense ànim de lucre, així que hi treballo quan tinc temps i ganes. Estic molt content amb Godot, així que seguiré amb aquest motor. Unity ja no és l’eina adequada per als meus projectes personals per les seves polítiques i els riscos que implica. Fer-ho tot des de zero amb C++ seria massa feina i no em permetria avançar. Godot és el punt mig perfecte entre flexibilitat i la sensació que el projecte és realment meu.&lt;/p>
&lt;p>Encara he d’aprendre molt de Godot, però m’ho estic passant bé. Vull fer-ho tot sense llibreries externes i només amb GDScript. El projecte encara no és públic, així que el mantindré privat una mica més. Però si algun dia tinc alguna cosa estable i de la qual em senti orgullós, el publicaré.&lt;/p>
&lt;p>Aquest últim any ha estat molt intens i no he pogut dedicar-li temps. Espero poder fer-ho ara, i que aquest blog em serveixi de motivació per seguir.&lt;/p>
&lt;p>Fins aquí la primera entrada amb contingut. Tinc moltes coses a explicar i més projectes per compartir, així que intentaré ser més actiu.&lt;/p>
&lt;p>Ens veiem a la pròxima actualització.&lt;/p>
&lt;p>Adéu!&lt;/p></description></item></channel></rss>