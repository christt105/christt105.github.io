[{"content":"Another post. This time we’re taking a break from the main projects to focus on some web development.\nBackground I\u0026rsquo;m not a web developer by any means, but it\u0026rsquo;s a field I like to mess around with occasionally, and it\u0026rsquo;s important if you want to showcase things.\nA few years ago, I built a personal website to show what I was working on, my work experience, and some projects. I used the vcard-personal-portfolio template, which I really liked. It was built with plain HTML and CSS, and at the time it was more than enough for what I needed.\nA couple of years later, I saw someone had taken the aesthetic of that template and ported it to React, Next.js, Tailwind CSS, and TypeScript. Honestly, it solved a few problems the original had, and it was based on a much more modern and scalable stack. I spent quite some time porting my site to this new version but eventually abandoned it, and the site stayed the way it was.\nAt the end of last year, I built what is now this blog using HUGO. I went through a few ideas before landing on HUGO, that could be a post on its own, but the truth is, I fell in love with it (yes, I’m the type to get obsessed with something). I used the Stack theme, which was pretty similar to what I had. I tweaked the colors to match my current site, made some adjustments, set everything up, and published my first post. I then added a link to the blog from my main website.\nMonths passed, and I decided to start posting more. Every time I looked at the site, it felt outdated, and the design inconsistency between the blog and the website started to bother me. I wanted to see if I could merge everything into HUGO. It wasn’t as simple as copy-pasting stuff, there was functionality the blog theme didn’t support, and I’m no HUGO expert either. Still, I gave it a try. I ran into several issues, but I think the result turned out pretty decent.\nChanges Here’s a summary of the key changes I made to the website.\nHome Page The home page is one of the most important parts of a site, it’s the welcome screen. I wanted to include a bit about myself, the technologies I use, and a contact section. My previous home page had way too much info and a GitHub commit calendar, which I liked but it wasn’t responsive. I went through the effort of implementing it, but in the new version, I ended up dropping it.\nWith HUGO, several things improved. Every page has its own endpoint, there\u0026rsquo;s multi-language support, light/dark mode, and the whole thing is better organized.\nA big change I had to make to the Stack theme was customizing the home page. By default, it just shows the latest posts, but I wanted a custom homepage with content like a normal post.\nResume This section kept almost the same structure. Building it with HTML was a pain, writing tags and manually bolding or underlining stuff was super annoying. But with HUGO, everything works with beautiful Markdown and front matter. For work experience, I created a folder for each company and listed the individual jobs inside each file.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 --- title: \u0026#34;Learny Land\u0026#34; image: \u0026#34;learnyland_logo.webp\u0026#34; contractType: full-time location: \u0026#34;Sallent, Catalonia, Spain\u0026#34; locationType: hybrid jobs: - title: \u0026#34;Unity Developer\u0026#34; start: 2021-06-01 end: 2021-07-31 type: \u0026#34;Hybrid\u0026#34; description: \u0026#34;Worked on educational mobile games for kids, ...\u0026#34; skills: [\u0026#34;Unity\u0026#34;, \u0026#34;C#\u0026#34;] - title: \u0026#34;Unity Developer (Internship)\u0026#34; start: 2021-02-01 end: 2021-05-31 type: \u0026#34;Hybrid\u0026#34; contractType: internship description: \u0026#34;Internship as a Unity developer, contributing to the early stages of development...\u0026#34; skills: [\u0026#34;Unity\u0026#34;, \u0026#34;C#\u0026#34;] --- For each company, I read all job entries and calculate the total time worked there. Then HUGO generates the final page with all the info.\nFor education, I did something similar but in a single file since each item didn’t need as much detail.\nI still need to add a button to download the resume as a PDF, and update the style because I’m not totally happy with it, but I’ll get to that later\u0026hellip;\nProjects This was the section I was most excited about. On the old site, there was a list of projects you could click on to see the details. You couldn’t show much info, filtering only worked with a tag, and adding new projects was a bit of a hassle.\nNow, each project has its own file with a bunch of variables. There\u0026rsquo;s a main list page, and each project has its own individual page with detailed content.\nFor each project you can define:\nTitle Image Short description (subtitle) Tags to link related projects Filters for grouping in the list Source code link (e.g., GitHub) Demo video Option to show GitHub download section Itch.io card Categories to link posts Weight to sort in list Project description (Markdown content) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 --- showTranslations: false title: \u0026#34;Elit3D\u0026#34; image: \u0026#34;Elit3DIconTransparent.png\u0026#34; description: \u0026#34;3D tile-based map editor\u0026#34; tags: [\u0026#34;c++\u0026#34;, \u0026#34;editor\u0026#34;, \u0026#34;3d\u0026#34;] filters: [\u0026#34;c++\u0026#34;, \u0026#34;tool\u0026#34;] repo: \u0026#34;christt105/elit3d\u0026#34; video: \u0026#34;b0STL00hSFo\u0026#34; githubDownload: false itch: user: \u0026#34;christt105\u0026#34; project: \u0026#34;elit3d\u0026#34; id: \u0026#34;1050498\u0026#34; link: \u0026#34;20a446\u0026#34; categories: - \u0026#34;elit3d\u0026#34; weight: 10 --- Elit3D is a tile-based 3D map editor. It supports multiple tile layers and 3D objects, and lets you export maps in different formats. With this setup, creating a new project is super easy and complete. There’s room for improvement, but I’m happy with how it turned out.\nBlog This section didn’t change much, I just had to mount the main blog page into this section. One fun thing I added was a more casual image for the blog area. It was also important to change the post URLs so they’re all under /blog.\nContact This one’s simple, just like before. Four cards with contact links and a map. I reused the same cards on the homepage thanks to HUGO partials.\nFinal Thoughts There’s still a lot of work to do and the result isn’t exactly “professional,” but I’m happy with how it is now. HUGO is honestly a great tool for people like me. It\u0026rsquo;s super flexible if you want to build everything yourself, and super easy if you use a theme. The fact that everything is written in Markdown is amazing, I love the format. It’s all clean, readable files that are easy to edit and organize.\nIt might technically be better to keep the blog and the website in separate projects, but that would mean more overhead. Right now, I can easily relate projects to posts. We’ll see how this scales once I have a larger number of posts, though I’m not sure I’ll ever reach that point.\nAll the content on my site, including theme modifications, is public on my GitHub repo. Hosting the site on GitHub is honestly super easy.\nHope you liked the new site and the behind-the-scenes! My goal was to unify the blog and the site visually, and I think I’ve done that. For now, the site will stay like this, and I’m really looking forward to jumping back into my other projects.\nSee you next time!\n","date":"2025-07-29T00:00:00+02:00","image":"https://christt105.github.io/blog/porting-to-hugo/cover_hu_9cacf7a39ebeff0c.png","permalink":"https://christt105.github.io/blog/porting-to-hugo/","title":"Porting My Website to HUGO"},{"content":"Hi again. This time I want to go over the journey that Godosters has taken, from its origin to where it is now.\nThis post was originally going to be part of the previous one, but it was already long enough and this content wasn\u0026rsquo;t essential to include there.\nOrigin Ever since I started learning to program, I’ve had the idea of creating a base project to make Pokémon-style games. The idea came from Pokémon Essentials, a base project made in RPG Maker XP, a very old piece of software. I liked the idea of doing the same thing but with a more modern foundation.\nIt’s a project I thought about a long time ago, and originally I wanted to make a Pokémon game engine for my final university thesis. But in the end, I decided to reduce the scope and focus on one aspect of the engine. That’s how Elit3D was born—a 3D tile-based map editor.\nThe idea was to keep expanding the project until I had the full base built in C++, but ever since finishing university I’ve been working full-time and haven’t been able to dedicate much time to personal projects. I’ve worked on Elit3D, Godosters, and other projects on and off.\nEvolution Godosters didn’t start as a Godot 4 project. It has had several predecessors.\nKip Engine Shortly after \u0026ldquo;finishing\u0026rdquo; Elit3D, I made a private fork and added the Lua scripting module from my game engine. The goal was to revive the original idea behind Elit3D—a 2.5D monster-taming engine mixing 3D models with pixel art.\nI worked on it for a few months until I had to set it aside due to lack of time. I didn’t get very far—basic player movement, a couple of NPCs, and the start of the Pokémon type database.\nPokémon Emerald Godot 3 This project\u0026rsquo;s development has been a real rollercoaster. I abandoned C++ due to its complexity and decided to try Godot in 2022. I started with Godot 3, since Godot 4 hadn’t been officially released yet (as far as I remember).\nThe idea was to test out Godot and see what it could offer. I spent a month learning and building a Pokémon Emerald prototype. I made very basic things: player movement, a few NPCs, and the start of the dialogue system. You can see it in this video:\nKip Unity Framework A few days later, I started what I called the Kip Unity Framework—what was meant to be a Unity-based Pokémon game framework. I don’t quite remember why I switched from Godot to Unity—maybe I found Godot too immature and decided to go deeper into Unity and C#, which I was using daily.\nI made a lot of progress in this project. Initially, it was meant to help me learn how to write shaders in Unity, and I kept adding features. Some of the things I built:\nA shader to render an infinite background A system for temporary tiles, like footprints in sand A shader mimicking the water reflection from Pokémon Emerald The beginning of the game intro, with all its animations and effects A node-based scripting system, which I used for the Birch Professor’s intro If you\u0026rsquo;re interested, I uploaded videos to this playlist: Pokémon Emerald Unity by christt105\nI worked on it off and on for about a year. But in September 2023, Unity announced its controversial pricing changes. Godot 4 had already been released by then, so I decided to give it another shot.\nGodosters And this time, I fell in love with Godot. I created a new project in Godot 4 with the goal of replicating what I had in Kip Unity Framework while exploring the engine.\nI started by implementing character movement. I was (and still am) learning, so many things have changed over time, and many more will have to change in the future. The idea is to build the full base in 2D and, thanks to Godot’s flexibility, also make a 2.5D version using Elit3D maps (though I doubt I’ll go that far—but that’s the plan).\nThis was the first video I have of the Godosters project:\nAnd that\u0026rsquo;s all for now. I wanted to look back at the project’s journey, because sometimes it feels like we haven’t made much progress… but looking back, there have been many attempts and a lot of learning.\nIf you\u0026rsquo;re curious about the current features of the project, check out the previous post, where I go into more detail about the current state of Godosters.\nSee you in the next post!\n","date":"2025-06-02T00:00:00+02:00","image":"https://christt105.github.io/blog/godosters-origin/cover_hu_817c79d930d9516d.png","permalink":"https://christt105.github.io/blog/godosters-origin/","title":"The Evolution of Godosters"},{"content":"Hi! In this post, I’m going to briefly explain the current state of the project I’ve been working on: Godosters.\nDescription Godosters is an engine for creating Pokémon-style games. It’s a project I started several years ago and has switched technologies a few times before settling on Godot 4. In the future, I’ll write a post about the evolution and the decisions that led me to use Godot.\nRight now, it’s a Godot base project with some core features, but the goal is to build all the necessary tools so users won’t need to know Godot in order to create their games.\nIt’s currently private, but as soon as I have something stable, I’ll make it public. The idea is to minimize dependencies and write everything in GDScript or GDExtensions when truly needed.\nCurrent Features In this blog, I’ll be writing a devlog covering features and changes in the project. Let’s go over the current features. If you like any and want to know how I built it, let me know in the comments.\nA short demonstration of the current project state in video format:\nWater Reflection Shader I still remember the first time I reached Petalburg City and saw my reflection in the lake next to that kid. It was an effect I thought would be easy to implement, so I chose it as my first one. I was interested in shaders, and honestly, Godot’s simplicity for writing shaders blew me away. It’s quite similar to GLSL. I made this water shader, and you can find all the details in the link. You can activate it per entity, change the color, and adjust the position. For example, in the video you can see how the player and Kecleon’s reflection under the bridge is a few tiles lower and tinted darker.\nInfinite Background Shader (Unmoving Plaid) Continuing with shaders, I created one for the infinite background (aka unmoving plaid effect). The idea is that each map has a fixed size, which helps in calculating boundaries and connecting maps. The problem is that, when the character reaches the map’s edge, the background becomes visible—unless everything is filled in. To reduce extra workload, I created a shader that renders a continuous image for the background. Each map will support adding a background image, so you don’t need to paint beyond its limits.\nMap System For the map system, I chose to make each area a scene inherited from a map template. I’ve read that scene inheritance isn’t the best solution, but that’s how it’s set up for now. Each map includes some attributes—for now, just the map size in tiles and connections to other areas.\nInside each map scene is a TileMap node where everything is drawn, although it’s not yet updated to Godot’s new tilemap system. I’ve defined some Z-index values to determine draw order—for example, reflections are set to -15.\nNext, there’s a collection of behavior TileMaps. These assign properties to tiles by painting with different sprites: you can block movement completely or directionally. You can also assign a tile ID, like if it\u0026rsquo;s water or leaves footprints, etc. After painting, you need to click a button to apply the data to the layer. Since there can be multiple behavior TileMaps, they can be toggled on or off during gameplay. For example, in the video, you see a bridge on Route 120 using two behavior TileMaps—one blocks water when you’re above the bridge, and the other is used below. When crossing the bridge, the active TileMap changes. It’s still an early-stage system that needs many improvements. The goal is to let you modify all this through a dedicated tool without worrying about what’s going on behind the scenes.\nLastly, there’s a list of \u0026ldquo;Actors\u0026rdquo; or events. These are NPCs or physical objects that have behaviors.\nActors An actor is an entity with behavior. You can assign things like textures, whether it reflects, the layer it uses, or if it’s solid.\nActors have a field where you can attach a behavior script. Each behavior object has functions that trigger depending on how you interact with them—for example, pressing the action button in front of them, entering their tile, or running continuously in a loop. You can add a list of actions, and they’ll execute in order. There are various actions available, and users can create reusable ones. Right now, everything is set in the inspector in a very rough way. In the future, I’d like to create a simple language that lets you define everything in a file. There’s also the idea of using nodes, like I did in Kip Unity Framework, which I think could be great for people who don’t like coding.\nBattle System I won’t lie—the battle system is what I least feel like doing. It has so many variables and is so complex that it takes a lot of work to make something decent. I’ve built a very basic system that I’ll expand as needed.\nI’ve considered using the Showdown battle engine so I don’t have to implement the entire logic and guarantee it works perfectly, but I’m not really sure if that’s possible. I need to investigate it.\nDatabase I really like data management, but it’s also what made me take a long break from the project. In Kip Unity Framework, I used ScriptableObjects for each Pokémon and every characteristic per species. Having everything separated by assets was something I liked a lot. The problem came when I tried to replicate this in Godot with Resources—it’s just not the same. They’re a great tool but not designed for this. The main issue is circular references. It’s a hot topic in the community and opinions vary widely. During development, I saw that future versions would support .uid for each file and thought that might solve it. I’ve been checking occasionally, but I’m still unsure whether to stick with this system or try something else for the database.\nDemo Even though it’s broken in many ways, I’ll try to release a build with each devlog to show the project’s progress. Keep in mind this is a very early version, and many systems don’t work or require the editor to run.\nDownload\rLinux\rWindows\rVersion:\rGodosters_v0.1.0\rFuture Honestly, I don’t know how far I’ll go with this project. It’s a personal project with no commercial intent, so I work on it whenever I have time and motivation. I’m really happy with Godot, so I’m definitely sticking with it. I know Unity isn’t the right engine for my personal projects anymore due to its policies and the risks involved. Starting from scratch with C++ would be way too much work and wouldn’t lead to progress. Godot is the perfect balance of flexibility and giving me the feeling that the project is truly mine.\nI still have a lot to learn about Godot, but I’m enjoying it. My goal is to build everything without external libraries and using only GDScript. The project isn’t public yet, so I’ll keep it private for a bit longer, but if I eventually have something stable and I’m proud of it, I’ll release it.\nThis past year has been really busy and I haven’t had time to work on it. Hopefully, I’ll have more free time now, and this blog will motivate me to keep going.\nThat’s it for this first content post. I’ve got lots to talk about and more projects to share, so I’ll try to stay more active.\nSee you in the next update.\nGoodbye!\n","date":"2025-05-26T00:00:00+02:00","image":"https://christt105.github.io/blog/godosters-devlog-0/cover_hu_ea4c08c3d1f0ab37.png","permalink":"https://christt105.github.io/blog/godosters-devlog-0/","title":"Introducing Godosters – Devlog #0"},{"content":"Hello everyone, welcome to my blog.\nI’ve been thinking about starting a blog for quite some time now. My main goal is to share the progress I’m making on my projects, some of which I haven’t made public yet. That said, I’m also open to writing posts about new things I discover in the tech world, or who knows, maybe I\u0026rsquo;ll feel like sharing thoughts on movies, series, and video games I’m currently enjoying.\nAfter giving it some thought, I decided to build the blog with Hugo. This is my first time using it, so let’s see how it goes. I’m using the Stack theme, which you can find referenced in the footer, though I’ve tweaked it a bit to make it look more like my personal website. I also kept the light mode active for that part of society that prefers it.\nThe idea is to make all posts available in the three languages I speak: Spanish, Catalan, and English. Let’s see if it isn’t too challenging to manage the blog in all three languages.\nComments are completely open to anyone who’d like to discuss anything.\nImage by kang at Twitter\n","date":"2024-11-04T19:33:08+01:00","image":"https://christt105.github.io/blog/hello-world/cover_hu_a9b0f91f1a65a05a.png","permalink":"https://christt105.github.io/blog/hello-world/","title":"Hello World!"}]