[{"content":"Otro post más. Esta vez vamos a descansar un poco de los proyectos principales y vamos a enfocarnos en desarrollo web.\nOrigen No soy desarrollador web, ni mucho menos, pero es un campo en el que de vez en cuando me gusta trastear y es importante si quieres mostrar cosas.\nHace unos años me hice una página web donde mostraba un poco lo que estaba haciendo, mi experiencia laboral y mis proyectos. Usé la plantilla vcard-personal-portfolio que me gustó bastante. Es una plantilla hecha con HTML+CSS, en ese momento era más que suficiente para hacer la web.\nUnos años más tarde vi que alguien había cogido la estética de la plantilla y la había porteado a React, Next.js, Tailwind CSS y TypeScript. La verdad que solucionaba algunos problemas que tenía el proyecto original y usaba una base mucho más moderna y escalable. Estuve bastante tiempo porteando mi web a esa nueva base pero lo acabé abandonando y la web siguió tal cual estaba.\nA finales del año pasado hice lo que ahora es este blog con HUGO. Pasé por varias ideas antes de encontrar HUGO, que podría dar para otro post, pero la verdad es que me enamoré de HUGO (sí, soy muy de obsesionarme con algo). Cogí el tema de Stack que era bastante parecido a lo que ya estaba usando. Le estuve cambiando los colores para que tuviera los mismos que mi página actual, hice algunos cambios, lo configuré y escribí el primer post. Finalmente creé un link en mi página web para redirigir al blog.\nPasaron los meses y me decidí por crear posts. Miraba la web y al verla desactualizada y notar el cambio entre la web y el blog, quería comprobar si podía tenerlo todo junto en HUGO. La verdad que no era tan fácil como copiar y pegar la información, había funcionalidad que obviamente el tema del blog no tenía y yo tampoco es que sea un experto en HUGO. Igualmente me decidí por intentarlo. Tuve varios problemas pero creo que ha quedado bastante decente.\nCambios Hagamos un repaso de los puntos clave de los cambios en la página web.\nPágina principal La página principal es uno de los puntos más importantes de la web, es la pantalla de bienvenida al usuario. Yo quería incluir un poco de información sobre mí, las tecnologías que uso y una sección de contacto. En mi anterior página había demasiada información y un calendario de commits, que me gustaba pero no era responsive. Hice todo lo necesario para ponerlo pero lo acabé descartando en la nueva web.\nCon HUGO se añadieron varias mejoras. Ahora cada página tenía su endpoint, multilenguaje, modo claro y oscuro y está todo mejor organizado.\nUn cambio importante que había que hacer al tema Stack fue el de cambiar la pantalla principal. El tema por defecto muestra los últimos posts, pero ahora era necesario mostrar la página principal como un post con su contenido.\nCurrículum La estructura de esta página es prácticamente la misma. Hacer esta sección con HTML era una pesadilla, estar escribiendo con las etiquetas y poner las negritas y subrayados era bastante incómodo. En cambio, con HUGO todo se puede hacer con el maravilloso Markdown y el front matter. Para la experiencia laboral creé una estructura donde pones una carpeta por cada empresa y dentro de cada archivo puedes definir cada trabajo.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 --- title: \u0026#34;Learny Land\u0026#34; image: \u0026#34;learnyland_logo.webp\u0026#34; contractType: full-time location: \u0026#34;Sallent, Cataluña, España\u0026#34; locationType: hybrid jobs: - title: \u0026#34;Programador Unity\u0026#34; start: 2021-06-01 end: 2021-07-31 type: \u0026#34;Híbrido\u0026#34; description: \u0026#34;Trabajé en el desarrollo de juegos móviles educativos para niños, ...\u0026#34; skills: [\u0026#34;Unity\u0026#34;, \u0026#34;C#\u0026#34;] - title: \u0026#34;Programador Unity (Prácticas)\u0026#34; start: 2021-02-01 end: 2021-05-31 type: \u0026#34;Híbrido\u0026#34; contractType: internship description: \u0026#34;Prácticas como desarrollador Unity, contribuyendo a las primeras fases del desarrollo...\u0026#34; skills: [\u0026#34;Unity\u0026#34;, \u0026#34;C#\u0026#34;] --- Por cada empresa, leo todos los trabajos y calculo el tiempo total por cada empresa. Luego, HUGO se encarga de generar la página con toda la información.\nPara la educación hice algo parecido pero en un único archivo, ya que no necesitaba tanta información por elemento.\nFalta añadir un botón que descargue el currículum en PDF, pero también he de cambiar el estilo porque no me acaba de convencer, así que ya lo haré más adelante\u0026hellip;\nProyectos Este apartado era el que más ganas tenía de hacer. En la anterior web había una lista de proyectos a la que clicabas y se abría la página del proyecto. No podías poner mucha información, la funcionalidad de filtros únicamente se podía hacer con una etiqueta por proyecto y añadir proyectos era incómodo.\nAhora hay un archivo por cada proyecto con muchas variables. Primeramente tenemos la página con la lista de proyectos y por cada proyecto una página individual con más información.\nPor cada proyecto puedes definir:\nTítulo Imagen Descripción para mostrar como subtítulo Etiquetas para relacionar proyectos Filtros para agrupar varios proyectos en la lista principal Código fuente para añadir un link a GitHub Un vídeo mostrando el proyecto Decidir si mostrar la sección de descargas de GitHub La tarjeta de descarga de Itch.io Categoría para relacionar los posts Peso del proyecto respecto a los otros Descripción del proyecto como cuerpo del archivo Markdown 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 --- showTranslations: false title: \u0026#34;Elit3D\u0026#34; image: \u0026#34;Elit3DIconTransparent.png\u0026#34; description: \u0026#34;Editor de mapas de baldosas en 3D\u0026#34; tags: [\u0026#34;c++\u0026#34;, \u0026#34;editor\u0026#34;, \u0026#34;3d\u0026#34;] filters: [\u0026#34;c++\u0026#34;, \u0026#34;herramienta\u0026#34;] repo: \u0026#34;christt105/elit3d\u0026#34; video: \u0026#34;b0STL00hSFo\u0026#34; githubDownload: false itch: user: \u0026#34;christt105\u0026#34; project: \u0026#34;elit3d\u0026#34; id: \u0026#34;1050498\u0026#34; link: \u0026#34;20a446\u0026#34; categories: - \u0026#34;elit3d\u0026#34; weight: 10 --- Elit3D es un editor de mapas basado en baldosas en 3D. Compuesto por varias capas de baldosas y objetos 3D, permite exportar los mapas en diferentes formatos. Con esto se puede crear un proyecto muy fácilmente y con todos los elementos necesarios. Hay cosas a mejorar pero estoy contento con el resultado.\nBlog Esta sección no tiene mucho cambio, básicamente había que poner la página principal del blog en esta sección. Una cosa que me apeteció añadir fue que la sección del blog tuviera una imagen más desenfadada. También era importante cambiar la dirección de los posts para que todos se encuentren dentro de /blog.\nContacto Esta página es simple, igual que la anterior. Cuatro tarjetas con canales de contacto y un mapa. Reaproveché las tarjetas en la página principal gracias a los partials de HUGO.\nConclusiones Aún queda mucho trabajo y el resultado no es profesional, pero yo estoy contento tal cual está ahora. Realmente HUGO es una muy buena herramienta para perfiles como el mío. Es totalmente abierta a poder hacer lo que quieras y, a la vez, si usas un tema prehecho, es muy sencillo hacerlo todo funcionar. El hecho de que todo sea con Markdown es increíble, estoy enamorado de este formato: todo son archivos legibles y fácilmente editables y ordenados.\nSeguramente tener la página y el blog separados en dos proyectos distintos sería mejor, pero supone más trabajo y puedo relacionar fácilmente mis proyectos a los posts. Veremos cómo escala al empezar a tener un tamaño considerable de posts, aunque no estoy seguro si llegaré a tener ese problema.\nTodo el contenido de mi página web, incluidos los cambios del tema, están públicos en mi repositorio de GitHub. Hostear la web en GitHub es realmente fácil.\nEspero que te haya gustado la nueva página web y la información. Mi objetivo era tener una web y un blog unificados en diseño y creo que es suficiente. Por ahora la web se va a quedar así y tengo muchas ganas de seguir con mis otros proyectos.\nHasta la próxima!\n","date":"2025-07-29T00:00:00+02:00","image":"https://christt105.github.io/blog/porting-to-hugo/cover_hu_9cacf7a39ebeff0c.png","permalink":"https://christt105.github.io/es/blog/porting-to-hugo/","title":"Porteando mi web a HUGO"},{"content":"Hola otra vez más. Esta vez voy a hacer un repaso de la trayectoria que ha tenido Godosters, desde su origen hasta ahora.\nEl contenido de este post iba a estar en el anterior, pero ya era suficientemente largo y no tan importante como para incluirlo.\nOrigen Desde que empecé a aprender a programar he tenido la idea de crear un proyecto base para crear juegos al estilo Pokémon. La idea viene de Pokémon Essentials, un proyecto base que está hecho en RPG Maker XP, un software muy antiguo. Me gustaba la idea de hacer lo mismo pero con una base más moderna.\nEs un proyecto que pensé hace mucho tiempo, y la idea era hacer un motor de juegos de Pokémon para mi trabajo de final del grado universitario. Pero al final decidí reducir la carga y hacer solo un aspecto del motor, y así nació Elit3D, un editor de mapas por tiles en 3D.\nLa idea era ir ampliando el proyecto hasta hacer toda la base en C++, pero desde que acabé la universidad he estado trabajando a jornada completa y no he podido dedicar mucho tiempo a mis proyectos personales. He ido trabajando de forma intermitente tanto en Elit3D como en Godosters y otros proyectos.\nEvolución Godosters no ha sido un proyecto empezado en Godot 4 directamente, sino que ha tenido varios predecesores.\nKip Engine Poco tiempo después de \u0026ldquo;acabar\u0026rdquo; Elit3D, hice un fork privado de Elit3D y le puse el módulo de scripting en Lua de mi motor de videojuegos. La idea era empezar la idea original de donde surgió Elit3D: un motor de juegos de monstruos de bolsillo en 2.5D, mezclando modelos 3D con pixel art.\nEstuve trabajando unos meses hasta que, por falta de tiempo, lo dejé de lado. No llegué a hacer gran cosa: un movimiento simple para el jugador, un par de NPCs y el comienzo de la base de datos de los tipos de Pokémon.\nPokémon Esmeralda Godot 3 La verdad que el desarrollo de este proyecto ha sido una montaña rusa. Descarté la idea de seguir usando C++ por la complejidad que añade y decidí hacer una prueba en 2022 con Godot. Empecé usando Godot 3, ya que Godot 4 aún no había salido oficialmente (creo recordar).\nLa idea era probar Godot a ver qué podía ofrecer. Estuve un mes aprendiendo y desarrollando un prototipo del Pokémon Esmeralda. Hice cosas muy básicas: el movimiento del jugador, un par de NPCs y el principio del sistema de diálogo. Se puede ver en este vídeo:\nKip Unity Framework Unos días después empecé lo que llamé Kip Unity Framework, lo que iba a ser un proyecto de Unity para hacer juegos de Pokémon. No recuerdo muy bien por qué cambié de Godot a Unity, creo que lo vi verde y decidí profundizar más en Unity y C#, que es lo que usaba a diario.\nEn este proyecto hice bastantes avances. Básicamente lo empecé para aprender a hacer shaders en Unity y fui añadiéndole más cosas. Estas son algunas de las cosas que hice:\nUn shader para renderizar un fondo infinito Un sistema de tiles temporales como las huellas en la arena Un shader que imita el reflejo en el agua del Pokémon Esmeralda El principio de la introducción con todas sus animaciones y efectos Un sistema de scripting por nodos, con el que hice la introducción del profesor Abedul Para quien le interese, estuve subiendo los vídeos en esta lista de reproducción: Pokémon Emerald Unity por christt105\nEstuve trabajando de forma intermitente durante un año aproximadamente, hasta que en septiembre de 2023 ocurrió la problemática de Unity con sus nuevas tarifas. Habiendo salido ya Godot 4, decidí volver a probar otra vez Godot.\nGodosters Ahora sí, me enamoré de Godot. Creé un nuevo proyecto en Godot 4 y la idea ha sido ir replicando lo que tenía en Kip Unity Framework mientras iba probando el motor.\nEmpecé creando el movimiento del personaje. Estaba (y estoy) aprendiendo, así que hay muchas cosas que he ido cambiando y tendré que cambiar en el futuro. La idea es hacer toda la base en 2D y, gracias a la versatilidad de Godot, crear también una versión en 2.5D con los mapas de Elit3D (que dudo que llegue tan lejos, pero es la idea).\nEste fue el primer vídeo que tengo del proyecto de Godosters:\nY eso es todo por ahora. Me hacía ilusión repasar la historia del proyecto, porque a veces parece que no hemos avanzado mucho\u0026hellip; pero mirando atrás, en realidad ha habido muchos intentos y aprendizajes.\nSi te interesa ver las funcionalidades actuales del proyecto, te recomiendo echar un vistazo al post anterior, donde hablo más en detalle de cómo está actualmente Godosters.\n¡Nos vemos en la próxima entrada!\n","date":"2025-06-02T00:00:00+02:00","image":"https://christt105.github.io/blog/godosters-origin/cover_hu_817c79d930d9516d.png","permalink":"https://christt105.github.io/es/blog/godosters-origin/","title":"La Evolución de Godosters"},{"content":"Hola, en este post voy a intentar explicar brevemente el estado actual del proyecto que he estado desarrollando, Godosters.\nDescripción Godosters es un motor para crear juegos al estilo de Pokémon. Es un proyecto que nació hace varios años y ha estado cambiando de tecnología hasta quedarse en Godot 4. En un futuro haré un post sobre la evolución y las decisiones que me llevaron a acabar usando Godot.\nAhora mismo es un proyecto base de Godot con algunas funcionalidades, pero el objetivo es acabar haciendo todas las herramientas para que no se necesiten conocimientos técnicos de Godot para crear los juegos.\nAhora es un proyecto privado, pero en cuanto tenga algo estable lo haré público. El objetivo es que no tenga muchas dependencias y esté todo hecho en GDScript, o GDExtensions cuando sea realmente necesario.\nFuncionalidades actuales En este blog voy a ir haciendo un diario de las funcionalidades y cambios del proyecto. Vamos a hacer un repaso de las funcionalidades actuales. Si hay alguna que te guste y te gustaría saber cómo la he hecho, házmelo saber en los comentarios.\nUna pequeña demostración del estado actual del proyecto en un vídeo:\nShader reflejo del agua Aún recuerdo la primera vez que llegué a Ciudad Petalia y me vi reflejado en ese lago al lado de ese niño. Era un efecto que pensé que sería fácil de implementar, como primer efecto para hacer. Estaba interesado en los shaders y la verdad que la simpleza para hacer los shaders en Godot me encantó. Se asemeja bastante a GLSL. Hice el shader del agua, tenéis toda la información en el enlace. Puedes activarlo en cada entidad, cambiarle el color y su posición. Por ejemplo, en el vídeo se ve cómo, en el puente, el reflejo del jugador y del Kecleon está unos tiles por debajo y con un color oscuro.\nShader de fondo infinito (Unmoving Plaid) Continuando con los shaders, hice el del fondo infinito (o unmoving plaid effect). La idea del proyecto es que cada mapa tenga un tamaño fijo, para calcular bien los límites de cada mapa y juntarlos. El problema con esto es que, si el personaje va al borde del mapa, se verá el fondo (a no ser que se rellene todo). Para evitar carga de trabajo adicional, he creado un shader que dibuja una imagen continua donde esté el fondo. Cada mapa contará con la posibilidad de añadir una imagen de fondo para no tener que preocuparte por pintar más allá de los límites del mapa.\nSistema de Mapas Para el sistema de mapas pensé en hacer que cada escenario fuera una escena heredada de un mapa plantilla. He leído que la herencia de escenas no es la mejor solución, pero de momento lo tengo así. Cada mapa contiene unos atributos, que de momento solo es el tamaño en tiles del escenario y las conexiones con otros escenarios.\nDentro de cada escena de mapa está el nodo TileMap donde se pinta todo, aunque no está actualizado con el nuevo sistema de tilemaps de Godot. He declarado algunos valores Z para definir qué se va a pintar antes o después; por ejemplo, los reflejos tienen un valor de -15.\nSeguidamente, tenemos una colección de TileMaps de comportamiento. En estos TileMaps se asignan las propiedades de cada tile pintando con diferentes sprites: puedes bloquear completamente el paso o por dirección. También puedes pintar el ID del tile; por ejemplo, si es agua, deja huellas, etc. Una vez pintado, hay que hacer clic en un botón para que se aplique sobre la capa. Al haber varios TileMaps de comportamiento, se pueden activar y desactivar durante la partida. Por ejemplo, en el vídeo se ve un puente, el de la ruta 120, con dos TileMaps de comportamiento: uno que bloquea el paso al agua cuando estás por encima del puente, y otro por debajo. Cuando pasas por el puente se cambia el TileMap usado. Es un sistema aún en pañales y que necesita muchos cambios. La idea es que modifiques todo esto sin realmente ver qué está pasando por debajo, con una herramienta dedicada a eso.\nFinalmente, tenemos una lista de \u0026ldquo;Actores\u0026rdquo; o eventos. Son los NPC o los objetos físicos que tienen un comportamiento.\nActores Un actor es una entidad con comportamiento. A las entidades puedes aplicarles ajustes como ponerles una textura, decidir si tienen reflejos, la capa donde se aplican o si son sólidos.\nLos actores tienen un campo donde puedes añadirles un comportamiento. Cada objeto de comportamiento tiene unas funciones que se disparan dependiendo de cómo interactúes con ellos; por ejemplo, al pulsar el botón de acción delante de ellos, al entrar en el tile donde esté la entidad o constantemente en un bucle. Le puedes añadir una lista de acciones y las hará en orden. Tienes diferentes acciones y la idea es que cada usuario pueda crear acciones que use recurrentemente. Ahora está todo en el inspector de una forma muy arcaica. La idea en un futuro es crear una especie de lenguaje para tenerlo todo en un archivo. También está la idea de poder hacerlo con nodos, como hice en Kip Unity Framework. Creo que puede estar muy bien para quienes no les gusta mucho programar.\nSistema de Batalla No voy a negar que el sistema de batalla es lo que menos me apetece hacer. Tiene tantas variables y es todo tan complejo que es mucho trabajo para que quede algo decente. He hecho un sistema muy básico, que iré ampliando cuando lo necesite.\nHe pensado en usar el motor de batallas de Showdown para no tener que aplicar toda la lógica y que todo funcione perfecto, pero realmente no estoy seguro si se puede hacer. He de investigar.\nBase de Datos Todo lo del manejo de datos es algo que me gusta y, a su vez, es lo que creo que hizo que me tomara un descanso bastante largo con este proyecto. En Kip Unity Framework tenía cada Pokémon y cada característica de cada especie en ScriptableObjects. La idea de tenerlo todo por assets y que pudieras tenerlo todo separado es algo que me gustaba mucho. El problema es que intenté replicar lo mismo en Godot con los Resources y no es igual. Son una herramienta muy buena, pero no están pensados para eso. El principal problema es tener referencias cíclicas. Es un tema bastante debatido en la comunidad y hay opiniones muy diversas. Cuando estaba desarrollando el proyecto, vi que en futuras versiones iban a implementar los .uid para cada archivo y pensé que lo mismo era una solución. He estado mirando de vez en cuando y realmente no sé si seguir con esta implementación o buscar algo diferente para la base de datos.\nDemo Aunque esté roto por todos los sitios, voy a intentar publicar una build en cada devlog para ir viendo el avance del proyecto. Tened en cuenta que es una versión muy temprana del proyecto y que muchos sistemas no funcionan o necesitan tener el editor abierto para funcionar.\nDescarga\rLinux\rWindows\rVersión:\rGodosters_v0.1.0\rFuturo La verdad es que no tengo muy claro hasta dónde voy a llegar con este proyecto. Es un proyecto personal al que no le voy a sacar rédito económico, por lo que trabajo en él cuando el tiempo y las ganas me lo permiten. Estoy muy contento con Godot, por lo que es seguro que lo voy a mantener en este motor. Unity ya sé que no es el motor para mis proyectos personales por sus políticas y lo que puede llegar a pasar. Por otro lado, hacerlo de cero con C++ es tantísimo trabajo que no avanzaría nada. Godot es el punto perfecto entre versatilidad y donde realmente siento míos mis proyectos.\nAún me queda mucho por aprender de Godot, pero me está gustando. Mi intención con este proyecto es poder hacer todo lo posible sin librerías externas y todo en GDScript. El proyecto no está para ver, por lo que lo mantendré en privado una temporada más, pero si en algún momento empiezo a tener algo suficientemente estable y estoy orgulloso de lo que he hecho, lo haré público.\nEste último año he estado bastante ocupado y no le he dedicado nada de tiempo. A ver si ahora empiezo a tener algo más de tiempo libre y me motivo con el blog para continuar con el desarrollo.\nY hasta aquí el primer post con contenido. Hay muchas cosas de las que quiero hablar y proyectos que comentar, por lo que intentaré estar más activo.\nNos vemos con más actualizaciones.\nAdiós!\n","date":"2025-05-26T00:00:00+02:00","image":"https://christt105.github.io/blog/godosters-devlog-0/cover_hu_ea4c08c3d1f0ab37.png","permalink":"https://christt105.github.io/es/blog/godosters-devlog-0/","title":"Presentando Godosters – Devlog #0"},{"content":"Hola a todo el mundo, os doy la bienvenida a mi blog.\nLlevo bastante tiempo con la idea de hacer un blog rondando por la cabeza. Mi objetivo principal es compartir los avances de mis proyectos, algunos de los cuales aún no he hecho públicos. Aun así, no descarto escribir posts sobre temas que vaya descubriendo en el mundo de la tecnología o, quién sabe, quizá me anime a escribir sobre películas, series y videojuegos que vaya consumiendo.\nDespués de pensarlo bastante, me he decidido a hacer el blog con Hugo. Es mi primer contacto con esta plataforma, así que veremos qué tal funciona. He usado el tema Stack, que podéis encontrar referenciado a pie de página, aunque lo he modificado un poco para que tenga una apariencia más cercana a mi web personal. También he dejado el modo claro para esa parte psicópata de la sociedad.\nLa idea es que todos los posts estén disponibles en los tres idiomas que hablo: castellano, catalán e inglés. A ver si no resulta muy costoso mantener los tres idiomas.\nLos comentarios están completamente abiertos para cualquiera que quiera hablar de cualquier tema.\nImagen por kang en Twitter\n","date":"2024-11-04T19:33:08+01:00","image":"https://christt105.github.io/blog/hello-world/cover_hu_a9b0f91f1a65a05a.png","permalink":"https://christt105.github.io/es/blog/hello-world/","title":"Hello World!"}]