<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Godosters on Christian Martínez De La Rosa</title><link>https://christt105.github.io/es/categories/godosters/</link><description>Recent content in Godosters on Christian Martínez De La Rosa</description><generator>Hugo -- gohugo.io</generator><language>es</language><lastBuildDate>Mon, 02 Jun 2025 00:00:00 +0200</lastBuildDate><atom:link href="https://christt105.github.io/es/categories/godosters/index.xml" rel="self" type="application/rss+xml"/><item><title>Godosters</title><link>https://christt105.github.io/es/projects/godosters/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://christt105.github.io/es/projects/godosters/</guid><description>&lt;img src="https://christt105.github.io/projects/godosters/cover.png" alt="Featured image of post Godosters" />&lt;p>Godosters es un motor y proyecto de juego al estilo Pokémon, actualmente desarrollado en Godot 4. El proyecto ha evolucionado a través de varias iteraciones y tecnologías, incluyendo C++, Unity y Godot 3. Su objetivo es proporcionar una base flexible para crear juegos de captura de monstruos, con características como un sistema de mapas personalizado, lógica de actores/eventos, shaders y más. Para una historia detallada y devlogs, consulta las entradas de blog relacionadas.&lt;/p></description></item><item><title>La Evolución de Godosters</title><link>https://christt105.github.io/es/blog/godosters-origin/</link><pubDate>Mon, 02 Jun 2025 00:00:00 +0200</pubDate><guid>https://christt105.github.io/es/blog/godosters-origin/</guid><description>&lt;img src="https://christt105.github.io/blog/godosters-origin/cover.png" alt="Featured image of post La Evolución de Godosters" />&lt;p>Hola otra vez más. Esta vez voy a hacer un repaso de la trayectoria que ha tenido Godosters, desde su origen hasta ahora.&lt;/p>
&lt;p>El contenido de este post iba a estar en el anterior, pero ya era suficientemente largo y no tan importante como para incluirlo.&lt;/p>
&lt;h2 id="origen">Origen
&lt;/h2>&lt;p>Desde que empecé a aprender a programar he tenido la idea de crear un proyecto base para crear juegos al estilo Pokémon. La idea viene de Pokémon Essentials, un proyecto base que está hecho en RPG Maker XP, un software muy antiguo. Me gustaba la idea de hacer lo mismo pero con una base más moderna.&lt;/p>
&lt;p>Es un proyecto que pensé hace mucho tiempo, y la idea era hacer un motor de juegos de Pokémon para mi trabajo de final del grado universitario. Pero al final decidí reducir la carga y hacer solo un aspecto del motor, y así nació &lt;a class="link" href="https://christt105.itch.io/elit3d" target="_blank" rel="noopener"
>Elit3D&lt;/a>, un editor de mapas por tiles en 3D.&lt;/p>
&lt;p>La idea era ir ampliando el proyecto hasta hacer toda la base en C++, pero desde que acabé la universidad he estado trabajando a jornada completa y no he podido dedicar mucho tiempo a mis proyectos personales. He ido trabajando de forma intermitente tanto en Elit3D como en Godosters y otros proyectos.&lt;/p>
&lt;h2 id="evolución">Evolución
&lt;/h2>&lt;p>Godosters no ha sido un proyecto empezado en Godot 4 directamente, sino que ha tenido varios predecesores.&lt;/p>
&lt;h3 id="kip-engine">Kip Engine
&lt;/h3>&lt;p>Poco tiempo después de &amp;ldquo;acabar&amp;rdquo; Elit3D, hice un fork privado de Elit3D y le puse el módulo de scripting en Lua de &lt;a class="link" href="https://empty-whisper.github.io/WhispEngine/" target="_blank" rel="noopener"
>mi motor de videojuegos&lt;/a>. La idea era empezar la idea original de donde surgió Elit3D: un motor de juegos de monstruos de bolsillo en 2.5D, mezclando modelos 3D con pixel art.&lt;/p>
&lt;p>Estuve trabajando unos meses hasta que, por falta de tiempo, lo dejé de lado. No llegué a hacer gran cosa: un movimiento simple para el jugador, un par de NPCs y el comienzo de la base de datos de los tipos de Pokémon.&lt;/p>
&lt;p>&lt;img src="https://christt105.github.io/blog/godosters-origin/KipEngine.png"
width="1920"
height="1040"
srcset="https://christt105.github.io/blog/godosters-origin/KipEngine_hu_8b15941847121c8f.png 480w, https://christt105.github.io/blog/godosters-origin/KipEngine_hu_84ff2ec6e96f809e.png 1024w"
loading="lazy"
alt="Preview of Kip Engine"
class="gallery-image"
data-flex-grow="184"
data-flex-basis="443px"
>&lt;/p>
&lt;h3 id="pokémon-esmeralda-godot-3">Pokémon Esmeralda Godot 3
&lt;/h3>&lt;p>La verdad que el desarrollo de este proyecto ha sido una montaña rusa. Descarté la idea de seguir usando C++ por la complejidad que añade y decidí hacer una prueba en 2022 con Godot. Empecé usando Godot 3, ya que Godot 4 aún no había salido oficialmente (creo recordar).&lt;/p>
&lt;p>La idea era probar Godot a ver qué podía ofrecer. Estuve un mes aprendiendo y desarrollando un prototipo del Pokémon Esmeralda. Hice cosas muy básicas: el movimiento del jugador, un par de NPCs y el principio del sistema de diálogo. Se puede ver en este vídeo:&lt;/p>
&lt;div class="video-wrapper">
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/fHTB6xaTJFY"
allowfullscreen
title="YouTube Video"
>
&lt;/iframe>
&lt;/div>
&lt;h3 id="kip-unity-framework">Kip Unity Framework
&lt;/h3>&lt;p>Unos días después empecé lo que llamé Kip Unity Framework, lo que iba a ser un proyecto de Unity para hacer juegos de Pokémon. No recuerdo muy bien por qué cambié de Godot a Unity, creo que lo vi verde y decidí profundizar más en Unity y C#, que es lo que usaba a diario.&lt;/p>
&lt;p>En este proyecto hice bastantes avances. Básicamente lo empecé para aprender a hacer shaders en Unity y fui añadiéndole más cosas. Estas son algunas de las cosas que hice:&lt;/p>
&lt;ul>
&lt;li>Un shader para renderizar un fondo infinito&lt;/li>
&lt;li>Un sistema de tiles temporales como las huellas en la arena&lt;/li>
&lt;li>Un shader que imita el reflejo en el agua del Pokémon Esmeralda&lt;/li>
&lt;li>El principio de la introducción con todas sus animaciones y efectos&lt;/li>
&lt;li>Un sistema de scripting por nodos, con el que hice la introducción del profesor Abedul&lt;/li>
&lt;/ul>
&lt;p>Para quien le interese, estuve subiendo los vídeos en esta lista de reproducción: &lt;a class="link" href="https://youtube.com/playlist?list=PL9EieIseZRQD4dVf_MWqubnc0_0wV6vZj&amp;amp;si=mtHnbZRdVdDaFLJU" target="_blank" rel="noopener"
>Pokémon Emerald Unity por christt105&lt;/a>&lt;/p>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/videoseries?list=PL9EieIseZRQD4dVf_MWqubnc0_0wV6vZj" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
&lt;p>Estuve trabajando de forma intermitente durante un año aproximadamente, hasta que en septiembre de 2023 ocurrió la problemática de Unity con sus nuevas tarifas. Habiendo salido ya Godot 4, decidí volver a probar otra vez Godot.&lt;/p>
&lt;h3 id="godosters">Godosters
&lt;/h3>&lt;p>Ahora sí, me enamoré de Godot. Creé un nuevo proyecto en Godot 4 y la idea ha sido ir replicando lo que tenía en Kip Unity Framework mientras iba probando el motor.&lt;/p>
&lt;p>Empecé creando el movimiento del personaje. Estaba (y estoy) aprendiendo, así que hay muchas cosas que he ido cambiando y tendré que cambiar en el futuro. La idea es hacer toda la base en 2D y, gracias a la versatilidad de Godot, crear también una versión en 2.5D con los mapas de Elit3D (que dudo que llegue tan lejos, pero es la idea).&lt;/p>
&lt;p>Este fue el primer vídeo que tengo del proyecto de Godosters:&lt;/p>
&lt;p>&lt;img src="https://christt105.github.io/blog/godosters-origin/godosters-first-gif.gif"
width="1913"
height="1005"
srcset="https://christt105.github.io/blog/godosters-origin/godosters-first-gif_hu_fe3a5f939f4939c9.gif 480w, https://christt105.github.io/blog/godosters-origin/godosters-first-gif_hu_4a9c01c0da3522c6.gif 1024w"
loading="lazy"
alt="Godosters primer gif"
class="gallery-image"
data-flex-grow="190"
data-flex-basis="456px"
>&lt;/p>
&lt;hr>
&lt;p>Y eso es todo por ahora. Me hacía ilusión repasar la historia del proyecto, porque a veces parece que no hemos avanzado mucho&amp;hellip; pero mirando atrás, en realidad ha habido muchos intentos y aprendizajes.&lt;/p>
&lt;p>Si te interesa ver las funcionalidades actuales del proyecto, te recomiendo echar un vistazo al &lt;a class="link" href="https://christt105.github.io/blog/es/p/godosters-devlog-0/" target="_blank" rel="noopener"
>post anterior&lt;/a>, donde hablo más en detalle de cómo está actualmente Godosters.&lt;/p>
&lt;p>¡Nos vemos en la próxima entrada!&lt;/p></description></item><item><title>Presentando Godosters – Devlog #0</title><link>https://christt105.github.io/es/blog/godosters-devlog-0/</link><pubDate>Mon, 26 May 2025 00:00:00 +0200</pubDate><guid>https://christt105.github.io/es/blog/godosters-devlog-0/</guid><description>&lt;img src="https://christt105.github.io/blog/godosters-devlog-0/cover.png" alt="Featured image of post Presentando Godosters – Devlog #0" />&lt;p>Hola, en este post voy a intentar explicar brevemente el estado actual del proyecto que he estado desarrollando, &lt;strong>Godosters&lt;/strong>.&lt;/p>
&lt;h2 id="descripción">Descripción
&lt;/h2>&lt;p>Godosters es un motor para crear juegos al estilo de Pokémon. Es un proyecto que nació hace varios años y ha estado cambiando de tecnología hasta quedarse en Godot 4. En un futuro haré un post sobre la evolución y las decisiones que me llevaron a acabar usando Godot.&lt;/p>
&lt;p>Ahora mismo es un proyecto base de Godot con algunas funcionalidades, pero el objetivo es acabar haciendo todas las herramientas para que no se necesiten conocimientos técnicos de Godot para crear los juegos.&lt;/p>
&lt;p>Ahora es un proyecto privado, pero en cuanto tenga algo estable lo haré público. El objetivo es que no tenga muchas dependencias y esté todo hecho en GDScript, o GDExtensions cuando sea realmente necesario.&lt;/p>
&lt;h2 id="funcionalidades-actuales">Funcionalidades actuales
&lt;/h2>&lt;p>En este blog voy a ir haciendo un diario de las funcionalidades y cambios del proyecto. Vamos a hacer un repaso de las funcionalidades actuales. Si hay alguna que te guste y te gustaría saber cómo la he hecho, házmelo saber en los comentarios.&lt;/p>
&lt;p>Una pequeña demostración del estado actual del proyecto en un vídeo:&lt;/p>
&lt;div class="video-wrapper">
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/3pehEhqk4rA"
allowfullscreen
title="YouTube Video"
>
&lt;/iframe>
&lt;/div>
&lt;h3 id="shader-reflejo-del-agua">Shader reflejo del agua
&lt;/h3>&lt;p>Aún recuerdo la primera vez que llegué a Ciudad Petalia y me vi reflejado en ese lago al lado de ese niño. Era un efecto que pensé que sería fácil de implementar, como primer efecto para hacer. Estaba interesado en los shaders y la verdad que la simpleza para hacer los shaders en Godot me encantó. Se asemeja bastante a GLSL. Hice el &lt;a class="link" href="https://godotshaders.com/shader/sprite-water-reflection-pixel-art/" target="_blank" rel="noopener"
>shader del agua&lt;/a>, tenéis toda la información en el enlace. Puedes activarlo en cada entidad, cambiarle el color y su posición. Por ejemplo, en el vídeo se ve cómo, en el puente, el reflejo del jugador y del Kecleon está unos tiles por debajo y con un color oscuro.&lt;/p>
&lt;p>&lt;img src="https://christt105.github.io/blog/godosters-devlog-0/water-shader.gif"
width="469"
height="322"
srcset="https://christt105.github.io/blog/godosters-devlog-0/water-shader_hu_625cbd93c75748f5.gif 480w, https://christt105.github.io/blog/godosters-devlog-0/water-shader_hu_5a857f274281ddea.gif 1024w"
loading="lazy"
alt="Shader agua"
class="gallery-image"
data-flex-grow="145"
data-flex-basis="349px"
>&lt;/p>
&lt;h3 id="shader-de-fondo-infinito-unmoving-plaid">Shader de fondo infinito (Unmoving Plaid)
&lt;/h3>&lt;p>Continuando con los shaders, hice el del &lt;a class="link" href="https://godotshaders.com/shader/infinite-sprite/" target="_blank" rel="noopener"
>fondo infinito (o unmoving plaid effect)&lt;/a>. La idea del proyecto es que cada mapa tenga un tamaño fijo, para calcular bien los límites de cada mapa y juntarlos. El problema con esto es que, si el personaje va al borde del mapa, se verá el fondo (a no ser que se rellene todo). Para evitar carga de trabajo adicional, he creado un shader que dibuja una imagen continua donde esté el fondo. Cada mapa contará con la posibilidad de añadir una imagen de fondo para no tener que preocuparte por pintar más allá de los límites del mapa.&lt;/p>
&lt;p>&lt;img src="https://christt105.github.io/blog/godosters-devlog-0/infinite-map.gif"
width="1284"
height="754"
srcset="https://christt105.github.io/blog/godosters-devlog-0/infinite-map_hu_13269702ec6bf0a5.gif 480w, https://christt105.github.io/blog/godosters-devlog-0/infinite-map_hu_afb0e7984e49beeb.gif 1024w"
loading="lazy"
alt="Shader mapa infinito"
class="gallery-image"
data-flex-grow="170"
data-flex-basis="408px"
>&lt;/p>
&lt;h3 id="sistema-de-mapas">Sistema de Mapas
&lt;/h3>&lt;p>Para el sistema de mapas pensé en hacer que cada escenario fuera una escena heredada de un mapa plantilla. He leído que la herencia de escenas no es la mejor solución, pero de momento lo tengo así. Cada mapa contiene unos atributos, que de momento solo es el tamaño en tiles del escenario y las conexiones con otros escenarios.&lt;/p>
&lt;p>&lt;img src="https://christt105.github.io/blog/godosters-devlog-0/MapTemplate.png"
width="1917"
height="1034"
srcset="https://christt105.github.io/blog/godosters-devlog-0/MapTemplate_hu_8541cbe954f7074.png 480w, https://christt105.github.io/blog/godosters-devlog-0/MapTemplate_hu_8f10f9085ea545df.png 1024w"
loading="lazy"
alt="Plantilla Map"
class="gallery-image"
data-flex-grow="185"
data-flex-basis="444px"
> &lt;img src="https://christt105.github.io/blog/godosters-devlog-0/Route120Editor.png"
width="1919"
height="1029"
srcset="https://christt105.github.io/blog/godosters-devlog-0/Route120Editor_hu_6ca633814e9f7cc3.png 480w, https://christt105.github.io/blog/godosters-devlog-0/Route120Editor_hu_922ace8f9ae58deb.png 1024w"
loading="lazy"
alt="Ruta 120 en Editor"
class="gallery-image"
data-flex-grow="186"
data-flex-basis="447px"
>&lt;/p>
&lt;p>Dentro de cada escena de mapa está el nodo TileMap donde se pinta todo, aunque no está actualizado con el nuevo sistema de tilemaps de Godot. He declarado algunos valores Z para definir qué se va a pintar antes o después; por ejemplo, los reflejos tienen un valor de -15.&lt;/p>
&lt;p>Seguidamente, tenemos una colección de TileMaps de comportamiento. En estos TileMaps se asignan las propiedades de cada tile pintando con diferentes sprites: puedes bloquear completamente el paso o por dirección. También puedes pintar el ID del tile; por ejemplo, si es agua, deja huellas, etc. Una vez pintado, hay que hacer clic en un botón para que se aplique sobre la capa. Al haber varios TileMaps de comportamiento, se pueden activar y desactivar durante la partida. Por ejemplo, en el vídeo se ve un puente, el de la ruta 120, con dos TileMaps de comportamiento: uno que bloquea el paso al agua cuando estás por encima del puente, y otro por debajo. Cuando pasas por el puente se cambia el TileMap usado. Es un sistema aún en pañales y que necesita muchos cambios. La idea es que modifiques todo esto sin realmente ver qué está pasando por debajo, con una herramienta dedicada a eso.&lt;/p>
&lt;p>Finalmente, tenemos una lista de &amp;ldquo;Actores&amp;rdquo; o eventos. Son los NPC o los objetos físicos que tienen un comportamiento.&lt;/p>
&lt;h3 id="actores">Actores
&lt;/h3>&lt;p>Un actor es una entidad con comportamiento. A las entidades puedes aplicarles ajustes como ponerles una textura, decidir si tienen reflejos, la capa donde se aplican o si son sólidos.&lt;/p>
&lt;p>Los actores tienen un campo donde puedes añadirles un comportamiento. Cada objeto de comportamiento tiene unas funciones que se disparan dependiendo de cómo interactúes con ellos; por ejemplo, al pulsar el botón de acción delante de ellos, al entrar en el tile donde esté la entidad o constantemente en un bucle. Le puedes añadir una lista de acciones y las hará en orden. Tienes diferentes acciones y la idea es que cada usuario pueda crear acciones que use recurrentemente. Ahora está todo en el inspector de una forma muy arcaica. La idea en un futuro es crear una especie de lenguaje para tenerlo todo en un archivo. También está la idea de poder hacerlo con nodos, como hice en &lt;a class="link" href="https://youtu.be/_zOz2Mj4AMI?si=Zeix66XkwtTjLc9d" target="_blank" rel="noopener"
>Kip Unity Framework&lt;/a>. Creo que puede estar muy bien para quienes no les gusta mucho programar.&lt;/p>
&lt;p>&lt;img src="https://christt105.github.io/blog/godosters-devlog-0/ActorKecleon.png"
width="495"
height="745"
srcset="https://christt105.github.io/blog/godosters-devlog-0/ActorKecleon_hu_377de4c563565376.png 480w, https://christt105.github.io/blog/godosters-devlog-0/ActorKecleon_hu_d2d0da77dae6f2e6.png 1024w"
loading="lazy"
alt="Actor Kecleon"
class="gallery-image"
data-flex-grow="66"
data-flex-basis="159px"
> &lt;img src="https://christt105.github.io/blog/godosters-devlog-0/ActorRunner.png"
width="507"
height="723"
srcset="https://christt105.github.io/blog/godosters-devlog-0/ActorRunner_hu_9ccd3194a1bdd862.png 480w, https://christt105.github.io/blog/godosters-devlog-0/ActorRunner_hu_71df2d7325c2e2c6.png 1024w"
loading="lazy"
alt="Actor Runner"
class="gallery-image"
data-flex-grow="70"
data-flex-basis="168px"
>&lt;/p>
&lt;h3 id="sistema-de-batalla">Sistema de Batalla
&lt;/h3>&lt;p>No voy a negar que el sistema de batalla es lo que menos me apetece hacer. Tiene tantas variables y es todo tan complejo que es mucho trabajo para que quede algo decente. He hecho un sistema muy básico, que iré ampliando cuando lo necesite.&lt;/p>
&lt;p>He pensado en usar el motor de batallas de Showdown para no tener que aplicar toda la lógica y que todo funcione perfecto, pero realmente no estoy seguro si se puede hacer. He de investigar.&lt;/p>
&lt;p>&lt;img src="https://christt105.github.io/blog/godosters-devlog-0/BattleSystem.png"
width="1918"
height="1022"
srcset="https://christt105.github.io/blog/godosters-devlog-0/BattleSystem_hu_dd18a46e83d3dc2c.png 480w, https://christt105.github.io/blog/godosters-devlog-0/BattleSystem_hu_a852f7d8f687b03d.png 1024w"
loading="lazy"
alt="Batallas"
class="gallery-image"
data-flex-grow="187"
data-flex-basis="450px"
>&lt;/p>
&lt;h3 id="base-de-datos">Base de Datos
&lt;/h3>&lt;p>Todo lo del manejo de datos es algo que me gusta y, a su vez, es lo que creo que hizo que me tomara un descanso bastante largo con este proyecto. En Kip Unity Framework tenía cada Pokémon y cada característica de cada especie en ScriptableObjects. La idea de tenerlo todo por assets y que pudieras tenerlo todo separado es algo que me gustaba mucho. El problema es que intenté replicar lo mismo en Godot con los Resources y no es igual. Son una herramienta muy buena, pero no están pensados para eso. El principal problema es tener referencias cíclicas. Es un &lt;a class="link" href="https://github.com/godotengine/godot-proposals/issues/7363" target="_blank" rel="noopener"
>tema bastante debatido en la comunidad&lt;/a> y hay opiniones muy diversas. Cuando estaba desarrollando el proyecto, vi que en futuras versiones iban a implementar los .uid para cada archivo y pensé que lo mismo era una solución. He estado mirando de vez en cuando y realmente no sé si seguir con esta implementación o buscar algo diferente para la base de datos.&lt;/p>
&lt;p>&lt;img src="https://christt105.github.io/blog/godosters-devlog-0/MudkipProperties.png"
width="655"
height="942"
srcset="https://christt105.github.io/blog/godosters-devlog-0/MudkipProperties_hu_a06cc148e04f262d.png 480w, https://christt105.github.io/blog/godosters-devlog-0/MudkipProperties_hu_4efbebad52f7ecb3.png 1024w"
loading="lazy"
alt="Datos de Mudkip"
class="gallery-image"
data-flex-grow="69"
data-flex-basis="166px"
> &lt;img src="https://christt105.github.io/blog/godosters-devlog-0/MonsterDatabase.png"
width="342"
height="855"
srcset="https://christt105.github.io/blog/godosters-devlog-0/MonsterDatabase_hu_acbdaaf28a1753b8.png 480w, https://christt105.github.io/blog/godosters-devlog-0/MonsterDatabase_hu_e8d9c19753dd9965.png 1024w"
loading="lazy"
alt="Base de Datos"
class="gallery-image"
data-flex-grow="40"
data-flex-basis="96px"
>&lt;/p>
&lt;h2 id="demo">Demo
&lt;/h2>&lt;p>Aunque esté roto por todos los sitios, voy a intentar publicar una build en cada devlog para ir viendo el avance del proyecto. Tened en cuenta que es una versión muy temprana del proyecto y que muchos sistemas no funcionan o necesitan tener el editor abierto para funcionar.&lt;/p>
&lt;div class="card download-card">
&lt;div class="download-card__content">
&lt;div class="download-card__title">
Descarga
&lt;/div>
&lt;div class="download-card__buttons">
&lt;a href='https://github.com/christt105/blog/releases/download/Godosters_v0.1.0/Godosters_v0.1.0-linux.zip'
class="button download-card__button download-card__button--linux">
&lt;svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="icon icon-tabler icons-tabler-outline icon-tabler-brand-debian">&lt;path stroke="none" d="M0 0h24v24H0z" fill="none"/>&lt;path d="M12 17c-2.397 -.943 -4 -3.153 -4 -5.635c0 -2.19 1.039 -3.14 1.604 -3.595c2.646 -2.133 6.396 -.27 6.396 3.23c0 2.5 -2.905 2.121 -3.5 1.5c-.595 -.621 -1 -1.5 -.5 -2.5" />&lt;path d="M12 12m-9 0a9 9 0 1 0 18 0a9 9 0 1 0 -18 0" />&lt;/svg> Linux
&lt;/a>
&lt;a href='https://github.com/christt105/blog/releases/download/Godosters_v0.1.0/Godosters_v0.1.0-windows.zip'
class="stack-btn stack-btn--secondary download-card__button download-card__button--windows">
&lt;svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="currentColor" class="icon icon-tabler icons-tabler-filled icon-tabler-brand-windows">&lt;path stroke="none" d="M0 0h24v24H0z" fill="none"/>&lt;path d="M21 13v5c0 1.57 -1.248 2.832 -2.715 2.923l-.113 .003l-.042 .018a1 1 0 0 1 -.336 .056l-.118 -.008l-4.676 -.585v-7.407zm-10 0v7.157l-5.3 -.662c-1.514 -.151 -2.7 -1.383 -2.7 -2.895v-3.6zm0 -9.158v7.158h-8v-3.6c0 -1.454 1.096 -2.648 2.505 -2.87zm10 2.058v5.1h-8v-7.409l4.717 -.589c1.759 -.145 3.283 1.189 3.283 2.898" />&lt;/svg> Windows
&lt;/a>
&lt;/div>
&lt;/div>
&lt;div class="download-card__footer">
&lt;span style="opacity: 0.8">Versión:&lt;/span>
&lt;b>Godosters_v0.1.0&lt;/b>
&lt;/div>
&lt;/div>
&lt;h2 id="futuro">Futuro
&lt;/h2>&lt;p>La verdad es que no tengo muy claro hasta dónde voy a llegar con este proyecto. Es un proyecto personal al que no le voy a sacar rédito económico, por lo que trabajo en él cuando el tiempo y las ganas me lo permiten. Estoy muy contento con Godot, por lo que es seguro que lo voy a mantener en este motor. Unity ya sé que no es el motor para mis proyectos personales por sus políticas y lo que puede llegar a pasar. Por otro lado, hacerlo de cero con C++ es tantísimo trabajo que no avanzaría nada. Godot es el punto perfecto entre versatilidad y donde realmente siento míos mis proyectos.&lt;/p>
&lt;p>Aún me queda mucho por aprender de Godot, pero me está gustando. Mi intención con este proyecto es poder hacer todo lo posible sin librerías externas y todo en GDScript. El proyecto no está para ver, por lo que lo mantendré en privado una temporada más, pero si en algún momento empiezo a tener algo suficientemente estable y estoy orgulloso de lo que he hecho, lo haré público.&lt;/p>
&lt;p>Este último año he estado bastante ocupado y no le he dedicado nada de tiempo. A ver si ahora empiezo a tener algo más de tiempo libre y me motivo con el blog para continuar con el desarrollo.&lt;/p>
&lt;p>Y hasta aquí el primer post con contenido. Hay muchas cosas de las que quiero hablar y proyectos que comentar, por lo que intentaré estar más activo.&lt;/p>
&lt;p>Nos vemos con más actualizaciones.&lt;/p>
&lt;p>Adiós!&lt;/p></description></item></channel></rss>